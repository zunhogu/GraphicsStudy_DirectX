Texture2D shaderTexture;
SamplerState SampleType;

struct PS_INPUT{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float2 texCoord1 : TEXCOORD1;
	float2 texCoord2 : TEXCOORD2;
	float2 texCoord3 : TEXCOORD3;
	float2 texCoord4 : TEXCOORD4;
	float2 texCoord5 : TEXCOORD5;
	float2 texCoord6 : TEXCOORD6;
	float2 texCoord7 : TEXCOORD7;
	float2 texCoord8 : TEXCOORD8;
	float2 texCoord9 : TEXCOORD9;
};

float4 ps_main(PS_INPUT input) : SV_TARGET{
	float weight0, weight1, weight2, weight3, weight4;
	float normalization;
	float4 color;


    // 픽셀의 색상은 현재 픽셀과 인접한 여덟개의 픽셀들의 평균값으로 계산된다.  또한 인접한 픽셀에는 가중치 값이 사용된다.
	// 가중치 값은 중앙에 가까울수록 큰 영향을 미치도록 한다.
	weight0 = 1.0f;
	weight1 = 0.9f;
	weight2 = 0.55f;
	weight3 = 0.18f;
	weight4 = 0.1f;

	// 가중치값들을 정규화하여 블러가 더 부드럽게 보이게 만든다.
	normalization = (weight0 + 2.0f * (weight1 + weight2 + weight3 + weight4));

	// 가중치들을 정규화한다.
	weight0 = weight0 / normalization;
	weight1 = weight1 / normalization;
	weight2 = weight2 / normalization;
	weight3 = weight3 / normalization;
	weight4 = weight4 / normalization;

	// 블러 처리된 픽셀을 구하기 위해 검정색에서 시작하여 각각 가중치 가운데 픽셀과 여덟 개의 인접한 픽셀들에 각각 가중치를 곱하고 더한다.
	// 색깔들을 검정색으로 초기화
	color = float4(0.0f, 0.0f, 0.0f, 0.0f);

	// 수직선상 아홉 픽셀값들의 가중치를 곱해 더한다.
	color += shaderTexture.Sample(SampleType, input.texCoord1) * weight4;
	color += shaderTexture.Sample(SampleType, input.texCoord2) * weight3;
	color += shaderTexture.Sample(SampleType, input.texCoord3) * weight2;
	color += shaderTexture.Sample(SampleType, input.texCoord4) * weight1;
	color += shaderTexture.Sample(SampleType, input.texCoord5) * weight0;
	color += shaderTexture.Sample(SampleType, input.texCoord6) * weight1;
	color += shaderTexture.Sample(SampleType, input.texCoord7) * weight2;
	color += shaderTexture.Sample(SampleType, input.texCoord8) * weight3;
	color += shaderTexture.Sample(SampleType, input.texCoord9) * weight4;

	// 마지막으로 알파값을 1로 설정한다.
	color.a = 1.0f;

    return color;
}