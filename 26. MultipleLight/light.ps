#define NUM_LIGHTS 4

Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightColorBuffer {
    float4 diffuseColor[NUM_LIGHTS];
};

struct PS_INPUT{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
    float3 lightDir1 : TEXCOORD1;
    float3 lightDir2 : TEXCOORD2;
    float3 lightDir3 : TEXCOORD3;
    float3 lightDir4 : TEXCOORD4;
};

float4 ps_main(PS_INPUT input) : SV_TARGET
{
	float4 textureColor;
    float lightIntensity1, lightIntensity2, lightIntensity3, lightIntensity4;
    float4 color, color1, color2, color3, color4;

    // 4개의 조명의 강도는 람베르트 공식을 이용해서 계산된다.
    lightIntensity1 = saturate(dot(input.normal, input.lightDir1));
    lightIntensity2 = saturate(dot(input.normal, input.lightDir2));
    lightIntensity3 = saturate(dot(input.normal, input.lightDir3));
    lightIntensity4 = saturate(dot(input.normal, input.lightDir4));

    // 조명의 색상 강도는 점조명의 강도와 빛의 색상을 이용하여 계산한다.
    color1 = diffuseColor[0] * lightIntensity1;
    color2 = diffuseColor[1] * lightIntensity2;
    color3 = diffuseColor[2] * lightIntensity3;
    color4 = diffuseColor[3] * lightIntensity4;

    textureColor = shaderTexture.Sample(SampleType, input.tex);

    // 마지막으로 4개의 조명을 모두 더해 픽셀의 최종 값을 산출한다.
    // 광원 색상값을 다 더하고 텍스처의 색상을 곱함으로 연산이 완료된다.
    color = saturate(color1 + color2 + color3 + color4) * textureColor; 
    
    return color;
}
