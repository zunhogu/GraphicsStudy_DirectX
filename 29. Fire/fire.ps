Texture2D fireTexture : register(t0);
Texture2D noiseTexture : register(t1);
Texture2D alphaTexture : register(t2);
// SampleType1은 Wrap을 사용
SamplerState SampleType1;
// SampleType2은 Clamp을 사용 그 이유는 Wrap을 사용하면 불꽃 텍스처를 한바퀴 돌아 샘플링하기 때문에 효과를 망친다.
SamplerState SampleType2;

cbuffer DistortionBuffer { 
    float2 distortion1;   // 세개의 노이즈 텍스처를 찌그러트리는데 사용되는 변수
    float2 distortion2;   // 세개의 노이즈 텍스처를 찌그러트리는데 사용되는 변수
    float2 distortion3;   // 세개의 노이즈 텍스처를 찌그러트리는데 사용되는 변수
    float distortionScale;   // 혼합된 최종 노이즈 텍스처를 흩트릴때 사용되는 변수
    float distortionBias;    // 혼합된 최종 노이즈 텍스처를 흩트릴때 사용되는 변수
};

struct PS_INPUT{
    float4 position : SV_POSITION; 
    float2 tex : TEXCOORD0;
    float2 texCoords1 : TEXCOORD1;
    float2 texCoords2 : TEXCOORD2;
    float2 texCoords3 : TEXCOORD3; 
};

float4 ps_main(PS_INPUT input) : SV_TARGET{
	float4 noise1;
	float4 noise2;
	float4 noise3;
	float4 finalNoise;
	float perturb;
	float2 noiseCoords;
	float4 fireColor;
	float4 alphaColor;

    // 세가지 노이즈를 다른 방법으로 샘플링해 세가지 노이즈 값을 저장한다.
    noise1 = noiseTexture.Sample(SampleType1, input.texCoords1);
    noise2 = noiseTexture.Sample(SampleType1, input.texCoords2);
	noise3 = noiseTexture.Sample(SampleType1, input.texCoords3);

    // 가져온 노이즈 값을 xy 좌표 범위로 변경한다. 
    noise1 = (noise1 - 0.5f) * 2.0f;
    noise2 = (noise2 - 0.5f) * 2.0f;
    noise3 = (noise3 - 0.5f) * 2.0f;

    // 샘플링 좌표의 x, y의 값을 distortion* 값에 따라 줄인다. 
	noise1.xy = noise1.xy * distortion1.xy;
	noise2.xy = noise2.xy * distortion2.xy;
	noise3.xy = noise3.xy * distortion3.xy;

    // 세 텍스처의 값들을 하나로 합치고 나면 이 픽셀에 사용될 최종 노이즈 값이 계산된다.
	finalNoise = noise1 + noise2 + noise3;

    // 최종 노이즈 값을 흩뜨려서 전체적인 노이즈 텍스처의 모양새가 불꽃처럼 보이도록한다.
    // 흩뜨리는 정도는 위쪽에서 더 크게 하고 아래로 갈수록 적게 흩뜨린다.
    // 이렇게 하면 위쪽에서 깜빡거리는 불꽃이 생기고 아래로 내려갈수록 흔들리지 않는 불꽃심 모양이 만들어진다.

    // 입력으로 들어온 텍스쳐의 Y좌표를 왜곡 크기와 바이어스 값으로 교란시킨다.
    // 이 교란은 텍스쳐의 위쪽으로 갈수록 강해져서 맨 위쪽에는 깜박이는 효과를 만들어낸다.
	perturb = ((1.0f - input.tex.y) * distortionScale) + distortionBias;

    // 계속 변하는 노이즈 텍스트 좌표와 기존의 정적인 모델의 텍스트 좌표를 합하여 최종 노이즈 텍스트 좌표를 구한다.
	noiseCoords.xy = (finalNoise.xy * perturb) + input.tex.xy;

    // 최종 노이즈 텍스트 좌표를 통하여 불꽃 텍스처와 알파 텍스처에 매핑시킨다.
    // wrap을 사용하는 스테이트 대신 clamp를 사용하는 스테이트를 사용하면 불꽃 텍스처가 래핑되는 것을 방지할 수 있다.
    fireColor = fireTexture.Sample(SampleType2, noiseCoords.xy);
    alphaColor = alphaTexture.Sample(SampleType2, noiseCoords.xy);

    // 왜곡 및 교란된 알파 텍스처 값을 알파 블렌딩에서 사용한다.
	fireColor *= alphaColor;

    return fireColor;
}
