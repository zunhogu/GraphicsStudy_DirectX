// 도메인 셰이더에서는 테셀레이터로부터 테셀레이션된 데이터를 받아 조작한 뒤 평소 정점 셰이더 처럼 정점의 위치를 반환한다.

cbuffer MatrixBuffer{
	matrix worldMatrix;
	matrix viewMatrix;
	matrix projectionMatrix;
};

struct ConstantOutputType{
	float edges[3] : SV_TessFactor; 
	float inside : SV_InsideTessFactor;
};
struct DS_INPUT{
	float3 position : POSITION;
	float4 color : COLOR;
};

struct DS_OUTPUT{
	float4 position : SV_POSITION;
	float4 color : COLOR;
};

//////////////////////////////////////////////////////////////////////////////// 
// Domain Shader 
//////////////////////////////////////////////////////////////////////////////// 

// 도메인 셰이더에서는 속성을 하나 가지고 있다. 
[domain("tri")]

// 도메인 셰이더는 헐 셰이더에서 온 패치 값과 상수 헐 셰이더의 테셀레이션 계수를 입력받는다.
// uvwCoord는 테셀레이터로부터 오는데, 새로 생긴 정점에 각 제어점들의 가중치들이다. u는 첫번째 제어점, v는 두번째 제어점, w는 세번째 제어점 (사각형 패치는 uv 가중치가 온다)
// 현재 예제에서는 세 제어점이 모두 균등한 가중치를 가지고 있기 때문에 정점이 세 제어점의 중심에 위치하게 된다.
DS_OUTPUT ds_main(ConstantOutputType input, float3 uvwCoord : SV_DomainLocation, const OutputPatch<DS_INPUT, 3> patch){

	float3 vertexPosition;
	DS_OUTPUT output;

	// uvwCoord 값, 즉 세 제어점의 가중치를 가지고 새 정점의 위치를 잡는다. 
	vertexPosition = uvwCoord.x * patch[0].position + uvwCoord.y * patch[1].position + uvwCoord.z * patch[2].position;

	// 공간변환
	output.position = mul(float4(vertexPosition, 1.0f), worldMatrix);
	output.position = mul(output.position, viewMatrix);
	output.position = mul(output.position, projectionMatrix);

	// 입력 색상을 픽셀 셰이더에 전달
	output.color = patch[0].color;

	return output;
}
